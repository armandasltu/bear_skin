// Generates classes based on c-palette map hex values.
// First level keys, e.g. 'bg', are prefixes for generated class names.
// Second level keys, e.g. 'light', are suffixes for generated class names.
//
// Classes will only be generated for each color if the corresponding variant is
// found. For example, if my first c-palette color only has values for "color"
// and "dark", no "light" class will be generated.
//
// See ../00-utilities/_variables.scss
//

$c-config: (
  bg: (                            // Set generated class prefix.
    property: 'background-color',  // Set property for generated classes.
    variants: (                    // Set the variant classes to be generated.
      'base',                      // e.g. bg-f2f2f2
      'dark',                      // e.g. bg-f2f2f2-dark
      'light'                      // e.g. bg-f2f2f2-light
    )
  ),
  c: (                             // Set generated class prefix.
    property: 'color',             // Set property for generated classes.
    variants: (                    // Set the variant classes to be generated.
      'base',                      // e.g. c-f2f2f2
      'dark',                      // e.g. c-f2f2f2-dark
      'light'                      // e.g. c-f2f2f2-light
    )
  )
);

// Loop over colors in $c-palette.
@each $color-key, $color-map in $c-palette {
  // Loop through option groups in $c-config.
  @each $prefix, $options in $c-config {
    $property: map-get($options, 'property');

    // Loop over variants and create classes.
    @each $variant in map-get($options, 'variants') {

      // Strip # from hex codes for use in class names.
      $color: map-get($color-map, 'base');
      $clean-color: str-replace(#{$color}, '#', '');

      @if $variant == 'base' {
        .#{$prefix}-#{$clean-color} {
          #{$property}: $color;
        }
      }
      @else {
        @if map-has-key($color-map, $variant) {
          $color: map-get($color-map, $variant);

          .#{$prefix}-#{$clean-color}-#{$variant} {
            #{$property}: $color;
          }
        }
      }
    }
  }
}
