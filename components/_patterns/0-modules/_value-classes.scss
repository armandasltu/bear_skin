// Generates classes based on c-palette map keys.
// First level keys, e.g. 'bg', are prefixes for generated class names.
// Second level keys, e.g. 'light', are suffixes for generated class names.
//
// Classes will only be generated for each color if the corresponding key is
// found. For example, if my first c-palette color only has values for "color"
// and "dark", no "light" class will be generated.
//
// See ../00-utilities/_variables.scss
//

$c-config: (
  bg: (                            // Generate background-color classes.
    property: 'background-color',
    base: false,                   // e.g. .bg-f3f3f3
    light: false,                  // e.g. .bg-f3f3f3-light
    dark: false                    // e.g. .bg-f3f3f3-dark
  ),
  c: (                             // Generate font color classes.
    property: 'color',
    base: false,                   // e.g. .c-f3f3f3
    light: false,                  // e.g. .c-f3f3f3-light
    dark: false                    // e.g. .c-f3f3f3-dark
  ),
);

// Loop over colors in $c-palette.
@each $key, $value in $c-palette {
  // Loop through option groups in $c-config.
  @each $c-key, $c-value in $c-config {
    // Loop over options and create classes if they are enabled.
    @each $option, $toggle in $c-value {
      $property: map-get($c-value, 'property');

      @if $toggle {
        // Strip # from hex codes for use in class names.
        $color: map-get($value, 'base');
        $clean-color: str-replace(#{$color}, '#', '');

        @if $option == 'base' {
          .#{$c-key}-#{$clean-color} {
            #{$property}: $color;
          }
        }
        @else {
          @if map-has-key($value, $option) {
            $color: map-get($value, $option);

            .#{$c-key}-#{$clean-color}-#{$option} {
              #{$property}: $color;
            }
          }
        }
      }
    }
  }
}
